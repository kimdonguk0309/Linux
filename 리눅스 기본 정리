### 리눅스 기본 명령어 ###
1. pwd (Print Working Directory) : 현재 위치 확인 명령어
==> 현재 위치 출력

2. cd (Change Directory) : 디렉토리 변경 명령어
< 형식 >
cd 폴더경로(명)

3. 디렉터리 (Directory) : 파일 / 디렉터리를 담을 수 있는 공간.
폴더(Folder)라고 부르지만 리눅스에서는 디렉터리라고 부름.

4. 홈 디렉터리 ( Home Directory ) : 로그인한 사용자의 "내 문서" 같은 폴더(디렉터리)
로그인한 사용자의 이름에 따라 경로가 달라지고 경로는 "/home/ < 사용자 이름 >/" 
ex) ubuntu 사용자 로그인 후 해당 사용자의 홈디렉터리 경로
==> /home/ubuntu

++) 주로 물결표(~ == 틸트)로 축약하여 사용함.

5. 루트(root) 디렉터리 : 리눅스 파일체제의 최상위 디렉터리는 /(루트)임.
		    : 이것은 모든 리눅스의 모든 디렉터리들의 시작점
		    : 모든 디렉터리는 절대 경로(Absolute Path)로 표기할 때에 이 디렉터리부터 시작함.


6. 절대 경로 : '''/ 최상위 디렉터리''' 가 기준   		( /로 시작 O )
Ex) /var/www/html 또는 /etc/ssh 등등


7. 상대 경로 : '''현재 작업중인 디렉터리'''가 기준 		( /로 시작 X )

7-1. "   .(온점)   " ( Current Directory ) 	: 현재 디렉터리 경로를 의미함.
Ex) 
/home/user1/a로 디렉터리를 변경해라!

< 가정 > / 안의 home 폴더까지 들어온 상황
cd ./user1/a


7-2. "	  ..	" ( Parent Directory ) 		: 상위 디렉터리 경로를 의미함.
Ex)
/home으로 디렉터리 경로를 변경해라!!!

< 가정 > /home/user1/a 까지 온 상황
cd ../..


경로 /home/ 에서 시작

[실습]

cd user0	현재 위치(/home)에서 하위디렉터리 user0 이동 (/home/user0)

cd .		현재 디렉터리 (/home/user0)

cd ..		상위 디렉터리 이동 (/home)

cd ..		상위 디렉터리 이동 (/)

cd etc		현재 위치에서(/)에서 하위 디렉터리 etc 이동(/etc)

cd ~		현재 접속중인 사용자의 홈디렉터리로 이동


-----------------------------------------------------------------------------------------------------------
@@@ 문제 @@@
-----------------------------------------------------------------------------------------------------------
[환경] : mkdir -p /test/a/b/c /test1/f/g/h

1. cd 명령어를 절대경로(/가 기준)을 이용해서 이동하세요

1) /test/a 이동
cd /test/a

2) /test1/f/g
cd /test1/f/g

3) /test/a/b/c/ 이동
cd /test/a/b/c/

4) /test1/f/g/h 이동
cd /test1/f/g/h


2. cd 명령어를 상대경로(현재 위치가 기준)을 이용해서 이동하세요

현재위치를 cd /test/a로 이동

1) /test/a/b/c/로 이동
cd ./b/c

2) /test 로 이동
cd ../../..

3) /test1/f 로 이동
cd ../test1/f

4) /test1/f/g/h로 이동
cd ./g/h
cd g/h


##########################################################

8.  ls (List) : 파일 & 디렉터리 목록 출력
## < 형식 > ##
ls <경로>
ls <옵션> <경로>


!!! 주의점 !!!
단 < 경로 >는 선택사항 == 생략 O
생략 시 현재 디렉터리의 디렉터리 & 파일 목록 출력


## < 옵션 > ##
옵션 : " - ", 하이폰 기호를 꼭 사용해야 함.

-a ( ALL ) : 모두 보기 (숨김상태의 파일 또는 폴더까지 모두 확인 )
예시) ls -a 

-l : 자세히 보기 ( 단순 나열이 X, 표(Table)로 정리하여 출력)
예시) ls -l

-R (recursion) : 하위 디렉터리 & 파일까지 모두 확인

-d : 디렉터리 보기

[실습]

ls /etc/

ls -l /etc/		### 법칙 1 ### [명령어][옵션][타겟]

ls -al /etc/		### 법칙 2 ### 명령어의 옵션은 조합이 가능하다

ls -Ral /etc/

cd /etc

ls -l			### 법칙 3 ### 상대경로에서의 작업은 생략 가능하다.

ls -ld /etc


9. mkdir (Make Directory) : 디렉터리 생성 명령어

## < 형식 > ##
mkdir <경로>/만들고자 하는 폴더이름
mkdir <옵션> <경로>/만들고자 하는 폴더이름


## < 옵션 > ##
-p 	: 상위 디렉터리 포함 생성
예시) mkdir -p /test/a/b/c
== 해석 => 
/ (루트 디렉터리) 안에 test 디렉터리, a 디렉터리, b 디렉터리까지  만들고 c 디렉터리를 만들어주세요~!!


[실습]
Mkdir /home/test

Ls -l /home

Mkdir /home/heath/a/b 	(x)
Mkdir /home/heath/a 
Mkdir /home/heath/a/b

Ls -al /home/heath/a
Mkdir  /home/test/c/d	(x)
Mkdir -p /home/test/c/d/



-----------------------------------------------------------------------------------------------------------
@@@ 문제 @@@
-----------------------------------------------------------------------------------------------------------
1. /dirtest 이라는 디렉토리 생성
mkdir /dirtest

2. /dirtest/a/b/c/d 한번에 모든 디렉터리 생성
mkdir -p /dirtest/a/b/c/d

ls -Ral /dirtest

########################################################################


-----------------------------------------------
++) man(manual) : 명령어 정보 확인
-----------------------------------------------

[실습]

man mkdir
man ls



10. touch : 파일 생성, 파일의 시간을 변경 명령어


## < 형식 > ##
touch <경로>/만들고자 하는 파일명
touch <옵션> 시간


## < 옵션 > ##
-d 00:00(<시간>) <경로>/파일명 		: DataTime의 약어, 시간 변경

-t YYYYMMDDHHMM(.ss) <경로>/파일명 	: 날짜/시간 변경

[환경]
mkdir /touch
cd /touch


[실습]
touch /touch/1
touch 2

touch /touch/3 4 ./5	### 법칙 4 ### 띄어쓰기 시 새로운 옵션 및 경로가 지정됨.

touch -d 12:12 1

touch -t 201601010101 6			날짜시간 지정 빈파일 생성



-----------------------------------------------------------------------------------------------------------
@@@ 문제 @@@
-----------------------------------------------------------------------------------------------------------
1. /dirtest 이라는 디렉토리 생성
mkdir /dirtest


2. /dirtest/a/b/c/d 한번에 모든 디렉터리 생성
mkdir -p /dirtest/a/b/c/d


3. /dirtest 디렉터리에 12, 34, 56이라는 파일 생성
touch /dirtest/12
touch /dirtest/34
touch /dirtest/56

or 

touch /dirtest/12 /dirtest/34 /dirtest/56

or

cd /dirtest
touch 12 34 56



########################################################################


11. cp ( Copy ) : 복사 ( 파일 또는 디렉터리 )

## < 형식 > ##
cp <경로>/원본파일 <경로>/복사파일		==> 이름만 복사 (소유자, 그룹, 권한)

!!! 주의점 !!!
복사파일의 이름을 짓지 않는다면 원본파일의 이름을 가져다가 사용함.


cp   <옵션>   <경로>/원본파일   <경로>/복사파일


## < 옵션 > ##
-i	: 질의 (물어보는 것), 확인 절차 	==> 진짜 복사할꺼야..? yes or no

-f 	: 강제 복사 (읽기 전용 권한 가지고 있는 파일도 덮어쓰기 O )

-r 	: 디렉터리 복사

-p	: 보존복사, 파일의 속성을 보존하는 복사 ( 소유자, 그룹, 권한, 타임스탬프 )




-----------------------------------------------------------------------------------------------------------
@@@ 문제 @@@
-----------------------------------------------------------------------------------------------------------

1. /dirtest 이라는 디렉토리 생성
mkdir /dirtest


2. /dirtest/a/b/c/d 한번에 모든 디렉터리 생성
mkdir -p /dirtest/a/b/c/d


3. /dirtest 디렉터리에 12, 34, 56이라는 파일 생성
cd /dirtest
touch 12 34 56


4. /back이라는 디렉터리 생성
mkdir /back


5. /dirtest 의 12 56 파일을 /back 디렉터리에 복사
cd /dirtest
cp 12 56 /back


6. /dirtest 의 34 파일을 /back 디렉터리에 보존복사
cp -p 34 /back


7. 34 파일의 시간을 1999년 01월 01일 12:00 으로 변경
touch -t 199901011200 /dirtest/34



8. /etc/login.defs /etc/init/whoopsie.conf /boot/grub/grub.cfg 파일을 확인하고
   3개의 파일 /backup 디렉토리 생성한 뒤 복사
ls -al /etc/login.defs
ls -al /etc/init/whoopsie.conf
ls -al /boot/grub/grub.cfg

mkdir /backup

cp /etc/login.defs /etc/init/whoopsie.conf /boot/grub/grub.cfg /backup


9. /backup에 있는 3개의 파일
   /backup/test 디렉토리에 각각 login init grub 란 이름으로 이름변경 복사

mkdir /backup/test
cd /backup			-- backup 디렉터리로 이동 (상대경로를 사용하기 위함)

cp login.defs /backup/test/login
cp whoopsie.conf /backup/test/init
cp grub.cfg /backup/test/grub



10.  /backup에 test1 이라는 파일 ,
	/backup/test 에 test2 라는 파일을 한줄명령어로 생성
touch /backup/test1 /backup/test/test2


11.   /backup/test 디렉토리를
	 /home/test/c/d/linux란 이름이 되도록  이름변경 보존 복사

mkdir -p /home/test/c/d/
cp -rp /backup/test /home/test/c/d/linux



12. /home으로 이동(cd /home) 한뒤
	경로를 변경하지 않고 /backup안에 있는 파일들 4개를 /home/test/c/d/linux
	 디렉토리에 한줄명령으로 보존복사 (이름변경및 디렉토리 복사 금지)
cd /home

cp -p /backup/grub.cfg /backup/login.defs /backup/whoopsie.conf /backup/test1 /home/test/c/d/linux



########################################################################



12. mv (Move) : 파일 & 디렉터리 이동 (옵션 X), 이름 변경

## < 형식 > ##

mv <대상 파일> <이름 변경 파일>
==> mv <a> <b> 		: a파일을 b라고 이름을 변경

mv <대상 파일> <이동하고자 하는 파일 경로>
==> mv <a> <b>		: a파일이 b파일로 이동

mv <대상 파일> <붙여놓고자 하는 디렉터리 경로>
==> mv <a> <b>		: a파일(들)이 b디렉터리로 이동



13. rm (Remove) : 파일 & 디렉터리 삭제

## < 형식 > ##
rm <옵션> <경로>/지우고싶은 파일 & 디렉터리 이름

-----------------------------------------
## < 옵션 > ##
-----------------------------------------
-f 	: 강제 삭제 ( 대상으로 하는 경로나 패턴에 일치하는 파일이나 디렉터리가 없어도 경고나 오류를 표시하지 않고 무시한다)

-r	: 디렉터리 삭제 ( 대상으로 하는 디렉터리가 비어있지 않다면 해당 디렉터리의 내용부터 삭제한 뒤 해당 디렉터리를 삭제한다 )

-i	: 질의 (Yes, No), 삭제하겠냐??? ==> yes or no




14. find 	: 파일 & 디렉터리 검색
--------------------------------------------------
## < 옵션 > ##
--------------------------------------------------
name 	: 파일 / 디렉터리명 검색
perm	: 지정된 퍼미션 검색
size	: 파일 크기가 일치하는 파일 찾기
type	: 파일 형식 지정함
exec	: 검색 결과를 해당 명령어로 실행하는 옵션
EX) find /test -exec ls -l {} \;

o	: 복수 옵션 적용
type	: 파일 유형검색 	(파일 or 디렉터리)


++)
atime n	: n일 전에 액세스한 파일 찾기, +n 형식 또는 -n 형식으로도 사용가능
mtime n	: n일 전에 마지막으로 수정된 파일 찾기, +n 형식 또는 -n 형식으로도 사용가능
newer	: 지정된 파일 이후 생성된 파일 찾기
used n 	: 변경된지 n일이 지난 모든 파일 찾기
uid	: 지정된 UID를 가진 파일 검색
gid	: 지정된 GID 를 가진 파일 검색
group	: 지정된 그룹을 가진 파일 검색
user	: 지정된 소유자가 소유한 모든 파일 검색


-----------------------------------------------------------------------------------------------------------
@@@ 문제 @@@
-----------------------------------------------------------------------------------------------------------


1. /findtest 디렉토리를 만들고 그안에 a,b,c,d 디렉토리, 1,2,3,4파일을 만든후 
find 명령어를 이용해서 login.defs을 찾아 /findtest에 복사하세요(/etc/에 있는 파일복사)

mkdir /findtest
---------------------------
cd /findtest
mkdir a b c d
touch 1 2 3 4

find /etc -name login.defs
cp /etc/login.defs /findtest/


2. find 명령어를 이용해서 passwd, whoopsie.conf 한줄명령어로 찾고 /findtest에 복사하세요 (/etc/에 있는 파일 복사)
find /etc -name passwd -o -name "whoo*" 
cp /etc/passwd /findtest
cp /etc/init/whoopsie.conf /findtest


3. find 명령어를 통해 /findtest 안의 내용중 파일만 검색하세요

find /findtest -type f



4. find 명령어를 통해 /findtest 의 모든 디렉토리의 목록을 볼 수있도록 한줄명령어로 해결하세요
find /findtest -exec ls -l {} \;



########################################################################

 
15. alias : 별칭 (명령어) 단축키
alias 		: 모든 alias 모음 확인
unalias [별칭]	: 별칭에 해당하는 alias를 지워줌


[ 옵션 ]  --> X




-----------------------------------------------------------------------------------------------------------
@@@ 문제 @@@
-----------------------------------------------------------------------------------------------------------
/aliastest 디렉터리를 삭제 후에 진행하세요 (rm -rf /aliastest)
1./aliastest 디렉토리를 만드는 alias a1 을 생성하세요

alias a1='mkdir /aliastest'


2. /aliastest 안에 빈파일 test1 test2 test3 을만드는 alias a2 를 생성하세요

alias a2='touch /aliastest/test1 /aliastest/test2 /aliastest/test3'


3. /aliastest 안의 빈파일 test1 test2 test3 의 시간을 11:30으로 
으로 변경하는 alias a3 을 생성하세요

alias a3='touch -t 202406071130 /aliastest/test1 /aliastest/test2 /aliastest/test3'


4. find 명령어를 이용해서 login.defs, passwd, whoopsie.conf 을 /aliastest 디렉토리로 복사시키는 alias a4를 생성하세요 
( 너무 어렵다느끼면 SKIP해도 됨 )

find /etc/ -name login.defs 
find /etc/ -name passwd
find /etc/ -name whoopsie.conf
-------------------------------------------

rm -rf /aliastest
mkdir /aliastest

find /etc/ \( -name login.defs -o -name passwd -o -name whoopsie.conf \) -exec cp {} /aliastest \;



5. a1,a2,a3,a4 를 한번에 사용할 수 있는 alias a5 를 만드세요

alias a5='a1
>a2
>a3
>a4'


6. /aliastest 를 삭제하는 alias a6를 생성하세요

alias a6='rm -rf /aliastest'

########################################################################



16. date : 시스템 시간 확인
17. cal	 : 달력 보기
18. hwclock : 하드웨어 시간 확인	
19. tzselect : 시간설정
20. sudo dpkg-reconfigure tzdata : 시간설정 (GUI)

++) 추가적으로 구글링 해보기!!


-----------------------------------------------------------
21. cat : 문서 전체 출력
-----------------------------------------------------------
-------------------
## < 옵 션 > ##
-------------------
-n : 행번호 출력


-----------------------------------------------------------
22. head & tail : 위 & 아래에서 시작해서 (기본 10줄) 출력
-----------------------------------------------------------
-------------------
## < 옵 션 > ##
-------------------
-숫자 : 지정된 숫자 줄 수만큼 출력

Ex) head -5 /etc/passwd
    tail -3 /etc/passwd



-----------------------------------------------------------
23. more : 화면 크기만큼 출력
-----------------------------------------------------------
==> space bar & enter & b를 사용해서 다음 페이지 또는 다음 줄, 전 페이지 확인할 수 있음.

-------------------
## < 옵 션 > ##
-------------------
-숫자 : 숫자만큼 끊어서 출력

more /etc/passwd



-----------------------------------------------------------------------------------------------------------
@@@ 문제 @@@
-----------------------------------------------------------------------------------------------------------

1. /output 디렉터리 만든 후 /etc/passwd, /etc/init/whoopsie.conf, /etc/login.defs 를 복사

mkdir /output
cp /etc/passwd /etc/init/whoopsie.conf /etc/login.defs /output


2. /output/login.defs 의 내용을 위에서부터 5줄만 확인

cd /output
head -5 login.defs


3. /output/whoopsie.conf의 내용을 아래에서부터 5줄만 확인

tail -5 whoopsie.conf


4. /output/passwd의 내용을 화면 크기만큼 끊어서 확인

more passwd


5. /output/passwd의 내용을 행번호를 붙여서 확인

cat -n passwd



6. find 명령어를 이용해서  /output 디렉터리 안의 login.defs whoopsie.conf, passwd의 내용을 위에서부터 5행만 출력하는 alias a1을 만들고 실행해서 확인
alias a1 = 'find /output \( -name login.defs -o -name whoopsie.conf -o -name passwd \) -exec head -5 {} \;'

------------------------------------------------------
alias a1 = 'find /output -name login.defs -exec head -5 {} \;
>find /output -name whoopsie.conf -exec head -5 {} \;
>find /output -name passwd -exec head -5 {} \;'


########################################################################

-----------------------------------------------------------
### 논리 연산자 ###
-----------------------------------------------------------
--------------------------------------------------------
24. && (AND 연산 기호) : AND 연산 수행
--------------------------------------------------------
왼쪽 명령어 성공 시 오른쪽 명령어 실행
왼쪽 명령어 실패 시 오른쪽 명령어 실행 X


--------------------------------------------------------
25. || ( OR 연산 기호 ) : OR 연산 수행
--------------------------------------------------------
왼쪽 명령어 성공 시 오른쪽 명령어 실행 X
왼쪽 명령어 실패 시 오른쪽 명령어 실행

-----------------------------------
[미니문제]
-------------------------------------------
기존 /andtest, /ortest 디렉토리를 삭제하고 진행 하세요

rm -rf /andtest /ortest

1. /andtest 디렉토리를 만들고 그안에  and 파일을 만드는 작업을 한줄명령어로 수행하세요

mkdir /andtest && touch /andtest/and


2. /ortest 디렉토리를 만들고 그안에 or파일을 만드는 작업을 한줄 명령어로 수행하세요 

mkdir /ortest && touch /ortest/or


########################################


--------------------------------------------------------
26. 와일드 카드 : 여러 개의 파일을 동시에 저장할 때 사용
--------------------------------------------------------

26-1. * 	: 모든 문자를 뜻함, 길이 상관 X
Ex) 
ls -l *		: 디렉터리 내 모든 문자
ls -l 1*	: 파일명이 1로 시작하는 모든 문자

26-2. ?		: 모든 문자를 뜻함, 물음표만큼의 길이 O
Ex)
ls -l ?		: 한문자인 파일 & 디렉터리 출력
ls -l ????	: 4문자인 파일 & 디렉터리 출력

26-3. []	: 범위 지정이 가능함
Ex)
ls -l [abcde]*	: 첫마디가 a,b,c,d,e를 가진 모든 문자
ls -l [a-e]*	: 첫마디가 a,b,c,d,e를 가진 모든 문자


------------------------------------------
미니 문제
------------------------------------------

1. /test 안에서 1을 포함한 파일&디렉토리의 목록을 출력하세요
-------------------
ls -al /test/*1*

OR

cd /test
ls -al *1*
-------------------

2. /test 안에서 앞글자가 1이고 끝글자가 2인 파일의 목록을 출력하세요
-------------------
ls -al /test/1*2

OR

cd /test
ls -al 1*2
-------------------

3. /test안에서 첫마디의 범위가 a~c 까지인 모든 문자의 목록을 출력하세요
-------------------
ls -al /test/[a-c]*

OR

cd /test
ls -al [a-c]*
-------------------




--------------------------------------------------------
27. 리다이렉션 : 표준 입력 & 표준 출력을 파일로 대체한다
--------------------------------------------------------

27-1. 표준출력 ( >, >> ) : 모니터 출력물을 파일로 대체한다.
==> 모니터에 출력할 것을 파일에다가 덮어쓰기 또는 추가하기


----------------------
기본 확인
----------------------

Cat
hello	- 키보드 입력
hello	- 모니터 출력
Ctrl+c	- 작업 취소


cat > a
hello	- 키보드 입력
	- 모니터 출력 없음
Ctrl+c	- 작업 취소

ls -al 	- a파일 생성

cat a	- a파일 확인 hello가 저장

----------------------
1) > : 생성 (덮어쓰기)
----------------------

cat a 	- hello 저장

cat > a
Test
Ctrl+c

cat a	- test 저장

cat > a
health
ctrl+c

cat a	- health 저장



----------------------
2) >> : 생성 (추가하기)
----------------------


cat >> b
bbb
CTRL + c		

ls -al 	- b파일 생성
cat b	- b내용보기, bbb 저장


cat b		
cat >> b 		
Aaa	
CTRL + c

cat b	- bbb아래에 Aaa 저장


cat b		
cat a b > c 	
cat c		 
tail -2  c>d	




27-2. 표준입력 (<) : 키보드에 입력할 내용을 파일로 대체한다.
==> sort : 정렬 명령어

cat > a
5
4
3
2
1

ctrl + c

sort < a
1
2
3
4
5

27-3. 표준에러 (2>) : 에러 메세지만 파일로 대체한다.

ls -al /23f2f3
ls -al /109k0289 2> errfile1
cat errfile1


27-4. 표준 출력 & 표준에러 (&>) : 출력물 + 에러 메세지를 파일로 대체한다

ls -al /etc/ /etwcmwioecw 2> errfile2
->/etc/목록은 출력, /etwcmwioecw 목록의 에러메시지는 파일로 저장


ls -al /etc/ /eetwomf2030 &> errfile3
->/etc/의 목록과 /etwcmwioecw 목록의 에러메시지는 파일로 저장


-------------------------------------------------
미니문제
-------------------------------------------------


[환경]
mkdir /retest

1. /etc디렉토리안의  목록을 /retest/a에 저장하세요
ls -al /etc > /retest/a


2. /etc/passwd의 위에서 7번째 행까지의 내용을 /retest/b에 저장하세요
head -7 /etc/passwd > /retest/b

3. /etc/init/whoopsie.conf의 아래에서 4번째 행까지의 내용을 /retest/c에 저장하세요

tail -4 /etc/init/whoopsie.conf > /retest/c


4. /retest 안의 a,b,c,의 내용을 병합하는 d 파일을 만드세요

cat a b c > /retest/d



--------------------------------------------------------
28. 파일 디스크립터 ( File Discriptor, FD)
--------------------------------------------------------
1 ) 정의
- 리눅스의 일반파일, 장치파일을 포함한 모든 파일을 관리하는 방식.
- 리눅스에서 프로세스(여기선 명령어)가 파일에 접근할 때 사용되는 개념.

- 프로그램이 실행될때 (프로세스 상태) 기본적으로 할당되는 파일 스크립터가 존재 (아래)
	- 표준입력장치(키보드) fd/0 stdin
	- 표준출력장치(모니터) fd/1 stdout
	- 표준에러장치(모니터) fd/2 stderr




2 ) 표준 출력 덮어쓰기 : 1>, > (1은 생략 가능)
-> stdout(모니터로)을 파일로 방향지정



3 ) 표준 출력 추가쓰기 : 1>>, >> (1은 생략 가능)


4 ) 표준 입력 	     : <
-> 키보드에 입력할 내용을 파일로 대체함


++) 
표준 입력 : <<
<< : 오른쪽 입력값(a)가 나올 때까지 입력값을 받음





5 ) 표준 출력 & 표준에러  : 2>&1
정보 )
2	: 표준 에러
>	: 표준 출력 리다이렉션
& 	: 파일디스크립터 변환
1	: 표준 출력


--------------------------------------------------------
29. 파이프 라인 ( | )
--------------------------------------------------------
설명 )
- 한명령어의 표준출력을 다른 명령어의 표준 입력으로 보내는 기능
- 왼쪽 명령의 결과를 받아서 오른쪽 명령어 적용


--------------------------------------------------------
30. ; ( 세미콜론 )
--------------------------------------------------------
설명 )
- 한번에 여러 명령어 실행
- 각 명령어를 독립적으로 수행

[ 예제 ]

mkdir /test100 ; touch /test100/a ; ls -al /test100

ls -al /dev ; cat -n 			-- x, 각 명령어 따로 실행


ls -al /dev ; cat -n ; more		-- x, 각 명령어 따로 실행




-------------------------------------------------
미니문제
-------------------------------------------------

1. /etc/ssh/ssh_config 를 왼쪽에 번호표가 붙은 상태로 10줄씩 끊어서 출력

cat -n /etc/ssh/ssh_config | more -10

2. /etc 디렉토리의 목록을 2줄씩 끊어서 출력하세요

ls -al /etc | more -2


3. /etc 디렉토리의 목록을 왼쪽에 번호표가 붙은 상태로 출력하세요

ls -al /etc | cat -n

-------------------------------------------------



-------------------------------------------------
파이프라인 문제
-------------------------------------------------
1. /etc/passwd 의 위에서 5번째 줄까지 출력
head -5 /etc/passwd


2. whoopsie.conf파일 검색 후 별도로 아래서부터 12번째 줄까지 출력(find로 찾을것)
find /etc -name whoopsie.conf -exec tail -12 {} \;


3. /etc/ssh/ssh_config 문서를 20줄씩 끊어서 출력
more -20 /etc/ssh/ssh_config


4. /etc/ssh/ssh_config 를 왼쪽에 번호표가 붙은 상태로 10줄씩 끊어서 출력
cat -n /etc/ssh/ssh_config | more -10


5. /etc 디렉토리의 목록을 2줄씩 끊어서 출력하세요
ls -al /etc | more -2


6. /etc 디렉토리의 목록을 왼쪽에 번호표가 붙은 상태로 출력하세요
ls -al /etc | cat -n


7. /cattest 디렉토리를 생성한 뒤 pwd를 입력했을때 /cattest가 나올 수 있도록 하세요
mkdir /cattest
cd /cattest
pwd


****** 8번 부터는 /cattest 디렉토리 안에서 작업 ******

8. 가로로 1 2 3 내용을 가지는 파일 a , 세로로 1 2 내용을 가지는 파일 b를 생성하세요
cat > a
1 2 3
^C

cat > b
1
2
^C


9. 파일 a 와 b 의 내용을 병합한 파일 c 를 생성하세요

cat a b > c




10. health 내용을 가지는 파일 d 를 생성한 뒤 파일 c 의 내용을 d 파일에 추가시키세요
cat > d
health
^C

cat c >> d

11. /etc 왼쪽에 번호표를 가지면서 디렉토리의 목록의 내용을 가지는 파일 e 를 생성하세요
ls -l /etc | cat -n > e


12. grub.cfg  login.defs  whoopsie.conf파일을 검색하여 /cattest 로 복사하고 grub.cfg, login.defs, whoopsie.conf, b, c, d, e 파일들의 위에서 2줄씩의 내용이 출력되는 파일을 /home/test/c/d/cattest/linux 이름으로 생성하세요
( /boot/grub/grub.cfg, /etc/login.defs, /etc/init/whoopsie.conf)


find / -name grub.cfg -o -name login.defs -o -name whoopsie.conf

cp /boot/grub/grub.cfg /etc/login.defs /etc/init/whoopsie.conf /cattest

mkdir /home/test/c/d/cattest

head -2 * > /home/test/c/d/cattest/linux (a를 포함한다는 가정)


------------------------------------------------------------------------------------------------



--------------------------------------------------------
31. vi ( Visual Editor ) : 리눅스 문서(ex. 파일) 편집기
--------------------------------------------------------


-----------------
VI MODE )
-----------------
이동 모드(초기모드 == Normal Mode) 	- 파일 내 이동
입력 모드(편집모드 == Insert Mode) 	- 파일 내 수정
EX 모드 (명령어 실행)		- 파일 내외에 특정 명령어 실행

1) 이동 모드 (Normal Mode)
단축키 )
- 커서 기준 -
h	: 왼쪽으로 한칸 이동
j	: 아래로 한칸 이동
k	: 위로 한칸 이동
l(소문자 L) : 오른쪽으로 한칸 이동

- 단어 기준 -
w	: 다음 단어의 처음으로 이동
e	: 다음 단어의 끝으로 이동
b	: 이전 단어의 처음으로 이동

- 행 기준 -
0	: 커서행의 처음으로 이동
$	: 커서행의 끝으로 이동

- 문서 기준 -
gg	: 문서의 처음
G	: 문서의 끝
[[	: 문서처음
]]	: 문서 끝

- 페이지 이동 -

1) 페이지 간 이동
Ctrl + f	: 다음 페이지
Ctrl + b	: 이전 페이지

2) 페이지 내 이동
Shift + h
Shift + m 
Shift + l ( 소문자 L )

---------------------
복사 및 삭제
---------------------
x	: 한글자씩 삭제
dd	: 1행 삭제
숫자 + dd : 숫자만큼 행 삭제
yy	: 1행 복사
숫자 + yy : 숫자만큼 행 복사
p	: 붙여넣기

- 삭제 활용 -
1 ) 단어 삭제
dw, de : 커서 위치 단어 삭제
db     : 전 단어 삭제

2 ) 행 삭제
d0     : 커서부터 행의 처음까지 삭제
d$     : 커서부터 행의 끝까지 삭제

3 ) 문서 복사
dgg    : 커서부터 문서 처음까지 삭제
dG     : 커서부터 문서 끝까지 삭제

- 복사 활용 -
1 ) 단어 복사
yw, ye, yb

2 ) 행 복사
y0	: 커서부터 행의 처음까지 복사
y$	: 커서부터 행의 끝까지 복사

3 ) 문서 복사
ygg	: 커서부터 문서 처음까지 복사
yG	: 커서부터 문서 끝까지 복사

붙여넣기 : p
되돌리기 : u
역되돌리기 : Ctrl + r

- 변경 -
r 	: 한문자 변경



---------------------
블럭 지정
---------------------
v		: 커서 블럭 지정
shift + v	: 행단위 블럭 지정
y		: 블럭 복사
c		: 블럭 잘라내기	, 붙여넣기 : p
d		: 블럭 삭제
~		: 대소문자 전환
U		: 대문자로 변환
u		: 소문자로 변환
>		: tab만큼 들여 쓰기
<		: tab만큼 내어 쓰기

- 미니 예제 -
v로 블럭지정 y -> p
shift + v 블럭지정 -> c -> p
v 블럭지정 -> d
v 블러지정 -> ~


------------
기타
------------
- 여러 문서 열기 -
cd /vitest
vim login.defs passwd		( :N(이전), :n(다음)으로 전환 )



2. 편집모드

a	: 오른쪽으로 한 칸 이동 후 편집모드 진입

i	: 그 자리에서 편집모드 진입

o	: 행 추가 후 편집모드 진입

s	: 현재 문자를 지우고 편집모드로 진입



-------------------------------------------------
미니문제
-------------------------------------------------
1. 7번 행 삭제
7gg
dd

2. 현재 위치에서 문서 처음까지 삭제
d1G

3. 11번 행 2행복사 붙여넣기
11G or 11gg
2yy
p

4. 15번 행부터 문서끝까지 행복사 후 문서 맨아래에서 붙여넣기
15G
yG
G
p

5. 1,2,3 작업 다시 되돌리기
u
u
u

-------------------------------------------------
[문제]
-------------------------------------------------
[환경]
mkdir /vitest
cp /etc/passwd /vitest
vi /vitest/passwd
:se nu

1.현재 커서 위치에서 h,j,k,l 키를 이용해서 행 마지막으로 이동하세요
l을 이용해서 이동

or 

$

2.현재 커서 위치에서 w,e,b 키를 이용해서 다음 행의 끝으로 이동하세요
w, e, b


3.다음 행의 처음으로 이동해서 한번에 행끝으로 이동하세요
j
0
$


4.행끝에서 다시 행의 처음으로 한번에 이동 하세요
0

5.문서 끝으로 이동하세요
G

or
 
]]

6.문서 처음으로 이동하세요
gg

or

[[

7.다음 페이지로 이동하세요
Ctrl + f

8.이전 페이지로 돌아오세요
Ctrl + b

9. 3번째 행으로 이동한뒤 'x' 한문자를 삭제 하세요
3G
l을 이용해서 x문자로 이동
x

10. 5번째 행으로 이동한뒤 한행을 삭제하세요
5G
dd

11. 문서마지막으로 이동한뒤 3행위로 이동 후 3행 삭제하세요
G(]])
3k
3dd

12. 문서처음으로 이동후 1행 복사 후 붙여넣기 하세요
gg([[)
yy
p

13. 문서 처음부터 끝까지 복사후 제일 마지막행으로 이동 후 붙여넣기 하세요
gg([[)
vG
y
G
p

14. 현재작업내용을 모두 되돌리세요
u


15. 1행의 'root' 만 블럭 지정 후 복사해서 행의 제일 마지막에 붙여넣기 하세요
gg([[)
ve
y
$
p

16. 2행의 'daemon' 만 블럭 지정 후 잘라내서 행의 제일 마지막에 붙여넣기 하세요
2gg
ve
c
$
p
######################################################################

3) 실행모드
-> 검색
-> 치환
-> 외부명령어 수행

-------------
검색 : '/', '?'
-------------
/ 	: 커서 기준으로 아래로 검색
?	: 커서 기준으로 위로 검색

n 	: 검색 문자 정방향 이동
N	: 검색 문자 역방향 이동


-------------
확인 
-------------
/var	-> n, N 이동 확인
?var	-> n, N 이동 확인


-------------
치환
-------------
:[범위]s/원본/수정/옵션


-------------
확인 
-------------
:s/th/1234		커서행 최초 1개 치환
:s/th/1234/g		커서행 모두 치환 g: '모두'라는 뜻
:10,12s/i/1234		지정범위 1개 치환
:10,12s/i/1234/g	지정범위 모두 치환(g)
:%s/th/1234/g		문서전체는 %s 사용
:%s/\/etc/\!!!/g	특수문자는 역슬래쉬(\)를 이용한다!!!!



------------------------
미니문제
------------------------
첫행의 모든 0을 0000으로 치환 하세요
:1s/0/0000

vi 내에서 모든 x를 y 로 치환 하세요
:%s/x/y/g

vi 내에서 모든 /를 ***으로 치환 하세요 
:%s/\//***/g


test
test
test


---------------------------------------------------
외부 명령어 실행 
---------------------------------------------------
:  	명령 실행모드
. 	현재 위치로
!  	외부 명령어 수행

:! 	외부에서 명령어 수행 	

:.!	외부의 명령어의 수행 결과를 vi모드로 가져 옴 	
	문서 커서행에 명령 수행 내용을 삽입
	(원본행 삭제되므로 행추가(o->esc) 후 사용)

:r !     외부 명령어 <command>의 출력을 현재 커서가 있는 줄 다음에 삽입.

------------------------
확인
------------------------

:! ls -al /etc				
:! mkdir /vitest/test && touch /vitest/test/testfile
:! ls -al /vitest /vitest/test

마지막 행에서 진행
:.! cal 03 2017
:.! head -5 /etc/ssh/ssh_conf

※ :!cd는 사용 불가


---------------------------------------------------
저장&종료
---------------------------------------------------
:enew   [파일명]  	새문서 열기(기존파일 닫고 새문서 생성)
:w		저장
:q 		나가기(저장x)
:w [파일명]	해당 파일명으로 저장(=다른이름으로 저장)

:q!		강제 나가기
:wq		저장 후 나가기
:wq [파일명]	다른 이름으로 저장 후 나가기


---------------------------------------------------
미니문제
---------------------------------------------------
1. mkdir /vitest2 만들고 /etc/login.defs파일을 /vitest2에 복사 하세요
mkdir /vitest2
cp /etc/login.defs /vitest2


2. vi 명령어를 이용해서 /vitest2/login.defs 파일의 모든 "PASS"를 "PASSWORD"로 치환하세요  
	(지금부터는 vi 내부에서 수행하세요)
vi /vitest2/login.defs
:%s/PASS/PASSWORD/g


3. vi 명령어를 이용해서 모든'#'을 '##' 치환하세요
:%s/#/##/g
 
4. vi 모드내에서 /vitest3 디렉토리를 생성하세요
:/mkdir /vitest3

5.행의 마지막에 /etc/passwd의 내용중 위로부터 10줄만 가져오세요
-------------------------------------------------------------------------
:!head -n 10 /etc/passwd  > /tmp/passwd_top10
=> head -10 /etc/passwd == head -n 10 /etc/passwd 동일 명령어

:$r /tmp/passwd_top10
=> $ : 마지막 줄
=> r : read
=> vim(vi) 에디터에서 파일을 읽어 현재 파일에 삽입하는 명령
=> 구체적으로, 이 명령은 파일의 내용을 현재 커서 위치가 아닌 파일의 끝에 추가함.


OR
:r !head -n 10 /etc/passwd 
=> :r !command : command의 출력을 현재 파일에 읽어오는 명령 (다음줄에 삽입)

OR

:. ! head -10 /etc/passwd
-------------------------------------------------------------------------

6. /vitest3 디렉토리 안에 test라는 파일명으로 저장 하세요
:w /vitest3/test



-------------------------------------------------
[문제]
-------------------------------------------------
0. /vitest 디렉터리를 만들고 내부에 /etc/login.defs /etc/init/whoopsie.conf /etc/passwd 파일을  검색해서 복사하세요.
mkdir /vitest
find /etc -name login.defs -o -name shoopsie.conf -o -name passwd
cp /etc/login.defs /etc/init/whooopsie.conf /etc/passwd /vitest
ls -al /vitest


1. /vitest/login.defs를 vi로 연뒤에 "절대" 나가지 마세요.
vi /vitest/login.defs


2. /viexe 디렉터리를 만드세요
:! mkdir /viexe
:! ls -al /viexe

3. /viexe 디렉터리 안에 1 2 3  4 파일 4개와 a1 a2 a3 a4 디렉터리 4개 생성
--------------------------------------------------------------------------------------
:! touch /viexe/1 /viexe/2 /viexe/3 /viexe/4 && mkdir /viexe/a1 /viexe/a2 /viexe/3 /viexe/4

OR

:! touch /viexe/{1,2,3,4} && mkdir /viexe/{a1,a2,a3,a4}
--------------------------------------------------------------------------------------
:! ls -al /viexe

4. /viexe 디렉터리 안에 파일목록만 문서 가장 위에 삽입
:.! ls -al /viexe

5. 문서 마지막에 /viexe 디렉터리 목록을 출력한 뒤 a1 a2 a3 a4 디렉터리 목록만 남도록 편짐
:r ! ls -al /viexe
dd를 이용해서 삭제

6. 5번 내용을 12번째 줄에 삽입한 뒤 /vitest/sevas로 저장
406 - 409 번 이렇게 네 줄이라면 406번에서 409yy
:11 
p
: w /vitest/sevas

7. 문서의 모든 DAYS를 sevas로 치환한 뒤에 /vitest/sevas1으로 저장
:%s/DAYS/sevas/g
:w /vitest/sevas1

8. 새문서를 열어서 ip 내용을 삽입한 뒤에 /vitest/sevas2로 저장
:w 
:enew
:.!ifconfig
:w /vitest/sevas2

9. /vitest의 login.defs whoopsie.conf passwd의 내용과 sevas sevas1 sevas2의 위에서 2번째 줄까지의 내용을 /home/vitest/linux/sevas3 파일로 저장하세요.
:! mkdir -p /home/vitest/linux/
:! cat /vitest/login.defs /vitest/whoopsie.conf /vitest/passwd > /home/vitest/linux/sevas3 && head -2 /vitest/sevas /vitest/sevas1 /vitest/sevas2 >> /home/vitest/linux/sevas3


10. /backup에 login.defs whoopsie.conf passwd 파일을 복사한 뒤 디렉터리의 목록을 다음과 똑같이 수정한 뒤 /home/vitest/linux/sevas3 파일에 추가하세요.

-----------. 1 sevas sevas 100 2010-10-10 10:10  login.defs 
-rw-rw-rw-. 2 sevas sevas 200 2011-11-11 11:11 passwd 
-r--r--r--. 3    root root    300 2012-12-12 12:12 whoopsie.conf 

:! mkdir /backup
:! cp /vitest/whoopsie.conf /vitest/passwd /vitest/login.defs /backup
:w
:enew
:.! ls -al /backup
수정 후
:w /vitest/a
:! cat /vitest/a >> /home/vitest/linux/sevas3


-------------------------------
32. chown : 소유권 변경 명령어
-------------------------------

-------------------------------
33. chmod : 허가권 변경 명령어
-------------------------------

-----------------------------------
허가권 부여방식
-----------------------------------
허가권을 부여하고 나면 색상이 바뀌는데, 이는 다음과 같다.
디렉터리 		: 일반적으로 파란색으로 표시
실행 파일 	: 초록색으로 표시
심볼릭 링크 	: 보라색으로 표시
일반 파일 	: 기본 색상(흰색 또는 회색)으로 표시


--------------------
numeric 
--------------------
->숫자 형식으로 부여


-----------
확인
-----------
chmod 755 a
chmod 566 a
chmod 755 a

--------------------
symbolic
--------------------
->문자 형식으로 부여

u+,- rwx : 소유권자 권한변경 
g+,- rwx : 소유그룹 권한 변경
o+- rwx  : other 권한 변경     
a +,- rwx  : 모두 권한 변경


-----------
확인
-----------
chmod u-rw a	
chmod g+w a
chmod o+rw a
chmod a-x a
chmod u+x,g+x a


-----------
미니문제
-----------
rw_r_xr__	-> 654
rwxr__r_x	-> 645
r__rwxr__	-> 474
r_xr__r_x	-> 545
r__r_x___	-> 450

755	-> rwxr-xr-x
644	-> rw-r--r--
701	-> rwx-----x
542	-> r-xr---w-
643	-> rw-r---wx
375	-> -wxrwxr-x


--------------------
실습 - 권한 확인
--------------------


--------------------
[환경]
--------------------
useradd user1
useradd user2
useradd user3

passwd user1		- test1234
passwd user2
passwd user3

mkdir /permission
cat > /permission/testfile
This is testfile!
^C

chmod 751 /permission	- user : rwx
			- group : r-x
			- others : --x

chmod 640 /permission/testfile
chown -R user1:user2 /permission


--------------------
[User별 권한 확인]
--------------------

--------------------
1. 디렉터리
--------------------
su - user1		- user1 로그인
cd /permission		- OK (x권한)
touch a			- OK (w권한)
ls -al			- OK (r권한)
exit


su - user2		- user2 로그인
cd /permission		- OK (x권한)
touch b			- NOK(w권한)
ls -al			- OK (r권한)
exit

su - user3		- user3 로그인
cd /permission		- OK (x권한)
touch c			- NOK(w권한)
ls -al			- NOK(r권한)
exit

권한 변경 : chmod 555 /permission

--------------------
2. 파일
--------------------

su - user1		- user1 로그인
cat testfile		- OK (r권한)
vim testfile 		- OK (w권한)
exit

su - user2		- user2 로그인
cat testfile		- OK (r권한)
vim testfile 		- NOK(w권한)
exit


su - user3		- user3 로그인
cat testfile		- NOK(r권한)
vim testfile 		- NOK(w권한)
exit

------------------------
2-1. 파일 x 권한 확인
------------------------
cd /permission 
vim myscript.sh
	echo "Hello, LINUX"
chown user1:user2 myscript.sh
chmod 754 myscript.sh

파일 실행 : ./myscript.sh


su - user1
cd /permission
cat myscript.sh		-OK(r권한)
vim myscript.sh		-OK(w권한)
./myscript.sh		-Ok(x권한)
exit

su - user2
cd /permission
cat myscript.sh		-OK(r권한)
vim myscript.sh		-NOK(w권한)
./myscript.sh		-OK(x권한)
exit

su - user3
cd /permssion
cat myscript.sh		-OK(r권한)
vim myscript.sh		-NOK(w권한)
./myscript.sh		-NOK(x권한)
exit









--------------------------------------------------------
문제
--------------------------------------------------------
[환경]
user10, user20, user30 계정 생성
useradd user10
useradd user20
useradd user30

mkdir /home/user10
mkdir /home/user20
mkdir /home/user30

passwd user10
passwd user20
passwd user30

1. /perm 디렉토리 생성
mkdir /perm

2. /perm 소유자계정 user30, 소유그룹 계정 user20 으로 소유권변경
chown user30:user20 /perm
ls -al


3. /perm 디렉토리에 user10 은 접근가능,목록보기가능,파일생성불가 허가권부여
chmod o+rx /perm

OR

setfacl -m u:user10:rx /perm


4. /perm 디렉토리에 user20 은 접근가능,목록보기불가,파일생성가능 허가권부여 
chmod g+wx /perm
chmod g-r /perm

OR

setfacl -m u:user20:wx /perm



5. /perm 디렉토리에 user30 은 접근불가,목록보기불가,파일생성불가 허가권부여
chmod u-rwx /perm

OR

setfacl -m u:user30:--- /perm


6. root 권한으로 user30의 권한을 바꿔 /perm 디렉토리에 user30 이 test파일을 만들고 그안에 'testfile' 내용을 저장
chmod 735 /perm

su - user30			// 계정 전환
cd /perm			// x권한
cat > test			// w권한
testfile
^C
cat test			// r권한


OR

setfacl -m u:user30:rwx /perm
su - user30 -c "echo 'testfile' > /perm/test"      // -c 옵션 : su로 변경한 사용자로 c옵션 후의 명령어 실행

7. user30계정으로 /perm/test의 파일의 허가 범위를 다음과 같이 지정
user30:읽기,쓰기 가능, user20:읽기불가 쓰기가능, 나머지계정 :읽기가능 쓰기불가
chmod 624 /perm/test

OR

setfacl -m u:user30:rw- /perm/test
setfacl -m u:user20:-w- /perm/test
setfacl -m o::r-- /perm/test

#######################################################



3. ACL ( Access Control List )

리눅스의 chmod 명령어를 사용한 권한 설정은 너무 단순하다.
하나의 파일에 사용자마다, 그룹마다 권한을 설정하기 위해 개발되었다.


1) ACL 설정 명령어

 * setfacl : 권한을 설정한다.

옵션 및 사용 예 :

1-1) m 옵션 : ACL 정책설정 시 사용자, 그룹을 지정하여 사용하는 옵션

ex) 
setfacl -m u:test1:rwx /aaa    		// test1이라는 사용자에게 /aaa 디렉터리에 대한 rwx 권한을 부여하겠다

setfacl -m g:testgroup1:wx /aaa		// testgroup1이라는 그룹에게 /aaa디렉터리에 대한 wx의 권한을 부여


1-2) R 옵션 : 대상이 되는 디렉터리 뿐만 아니라 하위의 파일, 디렉터리 까지 권한부여

ex)
setfacl -R -m u:test1:rwx /aaa


1-3) d 옵션 : 디폴트값으로 정책을 설정한다. 정책설정 후의 해당디렉터리 하위에 생성되는 파일에 동일한 ACL정책을 자동으로 설정시킨다. d옵션을 사용하지 않고 파일을 그냥 생성하면 ACL 정책이 설정 안된 상태로 생성된다.

*주의할점*

원래 디렉터리 하위의 존재하던 파일, 디렉터리들은 d옵션만을 주어서 정책을 설정할 시 정책이 먹히지 않는다. 

ex)
setfacl -d -m u:test1:rwx /aaa		// test1 계정의 /aaa 디렉터리에 대한 권한 설정을 rwx로 설정하겠다. + d 옵션에 의해서 이후 이 디렉터리에 하위생성 파일/디렉터리에 지금 설정한 ACL정책을 자동으로 부여하여 생성하겠다.

+참고사항) 
-R 옵션과 사용하면 유용하다!!


2) ACL 설정확인 명령어

* getfacl "대상" : "대상"의 ACL 설정을 보겠다.


옵션 : 

   -R : 하위의 것들 까지 같이 보겠다.



3) ACL 삭제 명령어

* setfacl -x u:test2 /aaa     		// /aaa 디렉터리에 test2 사용자의 설정을 지우겠다.


* setfacl -b /aaa			// /aaa 디렉터리에 모든 ACL 정책을 다 지워버리겠다.

옵션 : 
	-x : 지정한 사용자 / 그룹의 정책을 지운다.

	-b : ACL 정책을 ''모두'' 삭제한다.



-------------------------------
34. useradd : 사용자 계정 생성 명령어
-------------------------------

------------------------
[옵션]
------------------------
-u : UID 지정
-g : 주그룹 지정
-G : 보조 그룹 지정
-c : 주석, 설명
-d : 홈디렉터리 경로 지정
-m : 메뉴얼 참조(man useradd), 홈 디렉터리 자동 생성
-k : 스컬디렉터리 경로 지정
-s : 쉘 지정


-----------------
유저 생성1
-----------------
useradd test1
useradd -u 510 test2		// 보통 1000까지는 시스템과 관련된 UID
				// 1000이상 60000이하가 제일 BEST!

-----------------
유저 생성2 (그룹지정)
-----------------
useradd -g test1 test3
cf) 그룹을 지정하지 않으면 UID와 동일한 그룹이 생성됨

useradd -G health test4


-----------------
유저 생성3 (주석, 설명)
-----------------
useradd -c itTest test5


-----------------
유저 생성4 (홈디렉터리 경로 지정)
-----------------
useradd -d /export/home/test6 test6
useradd -d /export/home test8
useradd -d /export/home/health test9

cf1 )) 홈 디렉터리 경로 변경 시 해당되는 홈 디렉터리를 먼저 생성해야 함.
cf2 )) 홈 디렉터리 경로 지정 시 경로 끝에 계정명과 동일한 홈디렉터리명까지 기재할 것




-----------------
유저 생성5 (스컬 경로 지정)
-----------------
useradd -m -k /skeltest test7
cf) skel 디렉터리 홈 디렉터리를 구성하는 뼈대, 계정 생성시 한번 복사


-----------------
유저 생성6 (쉘 지정)
-----------------
useradd -s /bin/sh test10 

----------------------------------------------------
[미니 문제]
----------------------------------------------------
1. test10 계정 생성시 UID 값 1800 으로 지정
useradd -u 1800 test10

2. test20 계정 생성시 주그룹을 test10 으로 지정
useradd -g test10 test20

3. test30 계정 생성시 보조그룹 test10 추가
useradd -G test10 test30

4. test40 계정 생성시 홈디렉토리 경로를 /export/test40 으로 지정
useradd -d /export/test40 test40

5. test50 계정 생성시 스컬경로를 /skel2 로하고 test50홈디렉토리에 test50파일
이 생성되도록 하세요
mkdir /skel2
touch /skel2/test50
useradd -m -k /skel2 test50


6. test60 계정 생성시 쉘을 /bin/ksh 로 설정 
useradd -s /bin/bash test60



#####################################################


------------------------------------------------
35. usermod : 사용자 계정정보 변경 명령어
------------------------------------------------
-------------------------------------
[옵션]
-------------------------------------
1. -d 		: 홈디렉토리 설정
(testuser의 홈디렉터리를 testuser-new로 변경할 때)

Ex)
usermod -d /home/testuser-new testuser


2. -m		: 홈디렉토리 이동

Ex)
usermod -m -d /home/testuser-new testuser


------------------------------
[실습]
------------------------------
usermod -u 2000 test10		// UID 변경
usermod -g health test10	// 주그룹 변경
usermod -G test10 test20	// 보조그룹 변경
usermod -c LINUX-TEST test30	// 주석 변경
usermod -s /bin/sh test80	// 쉘 변경


--------------------------------------------
36. userdel: 계정 삭제 명령어
--------------------------------------------

-------------------------------
[옵션]
-------------------------------
-r		

### 일반 삭제와 r옵션의 차이점 ###

1)) userdel 유저이름 (일반 삭제)
	/etc/passwd	- 삭제
	/etc/shadow	- 삭제
	/etc/group	- 삭제

	/home/유저이름	- ''존재''
	/var/spool/mail/유저이름	- ''존재''

2)) userdel -r 유저이름
	/etc/passwd	- 삭제
	/etc/shadow	- 삭제
	/etc/group	- 삭제

	/home/유저이름	- ''삭제''
	/var/spool/mail/유저이름	- ''삭제''


-------------------------------
계정 수정
-------------------------------
1.test1 계정의 UID를 5555로 변경하세요
usermod -u 5555 test1

2.test2 계정의 주그룹을 test3으로 변경하세요
usermod -g test3 test2

3.test3 계정의 보조그룹 test1 추가하세요
usermod -G test1 test3

4.test4 계정의 홈디렉토리를 /export/home/test4로 변경하세요
usermod -md /export/home/test4 test4

5.test5 계정의 쉘경로를 /bin/sh로 변경하세요
usermod -s /bin/sh test5

-------------------------------
계정 삭제
-------------------------------
1.test4 계정을 삭제 하고 삭제되지 않는 파일이나 디렉토리는 
rm 명령어로 삭제하세요

userdel test4

rm -rf /home/test4

2.test5 계정을 작업내용 포함 삭제하세요
userdel -r test5

##########################################################
